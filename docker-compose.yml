networks:
  main-network:
    driver: bridge
  
volumes:
  postgres_data:
  media:

services:
  auth:
    container_name: auth
    build:
      context: auth_service
      dockerfile: Dockerfile
    volumes:
      - ./certs/services/auth/auth.crt:/etc/ssl/auth.crt:ro
      - ./certs/services/auth/auth.key:/etc/ssl/auth.key:ro
      - ./certs/ca/ca.crt:/etc/ssl/ca.crt:ro
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "8000"
    env_file:
      - .env
    restart: on-failure
    networks:
      - main-network

  users:
    container_name: users
    image: users
    build:
      context: .
      dockerfile: users_service/Dockerfile
    expose:
      - "8000"
    volumes:
      - media:/media:rw
      - ./certs/services/users/users.crt:/etc/ssl/users.crt:ro
      - ./certs/services/users/users.key:/etc/ssl/users.key:ro
      - ./certs/ca/ca.crt:/etc/ssl/ca.crt:ro
    env_file:
      - .env
    networks:
      - main-network
    restart: on-failure
    depends_on:
      auth:
        condition: service_started

  chat:
    container_name: chat
    build:
      context: chat_service
      dockerfile: Dockerfile
    stop_grace_period: 2s
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started 
      auth:
        condition: service_started
    volumes:
      - ./certs/services/chat/chat.crt:/etc/ssl/chat.crt:ro
      - ./certs/services/chat/chat.key:/etc/ssl/chat.key:ro
      - ./certs/ca/ca.crt:/etc/ssl/ca.crt:ro
    networks:
      - main-network
    restart: on-failure

  social:
    container_name: social
    build:
      context: social_service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./certs/services/social/social.crt:/etc/ssl/social.crt:ro
      - ./certs/services/social/social.key:/etc/ssl/social.key:ro
      - ./certs/ca/ca.crt:/etc/ssl/ca.crt:ro
    depends_on:
      redis:
        condition: service_started 
      auth:
        condition: service_started 
    networks:
      - main-network
    restart: on-failure

  gateway:
    container_name: gateway
    build:
      context: gateway_service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./certs/services/gateway/gateway.crt:/etc/ssl/gateway.crt:ro
      - ./certs/services/gateway/gateway.key:/etc/ssl/gateway.key:ro
      - ./certs/ca/ca.crt:/etc/ssl/ca.crt:ro
    depends_on:
      matchmaking:
        condition: service_started
    expose:
      - "8057"
    networks:
      - main-network
    restart: on-failure

  matchmaking:
    container_name: matchmaking
    build:
      context: matchmaking_service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./certs/services/matchmaking/matchmaking.crt:/etc/ssl/matchmaking.crt:ro
      - ./certs/services/matchmaking/matchmaking.key:/etc/ssl/matchmaking.key:ro
      - ./certs/ca/ca.crt:/etc/ssl/ca.crt:ro
    depends_on:
      postgres:
        condition: service_healthy
      pong:
        condition: service_started
      auth:
        condition: service_started 
    expose:
      - "8000"
    networks:
      - main-network
    restart: on-failure

  nginx:
    container_name: nginx
    image: nginx
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "3000:443"
      - "8443:8443"
    depends_on:
      users:
        condition: service_started
      auth:
        condition: service_started
      matchmaking:
        condition: service_started
      gateway:
        condition: service_started
    volumes:
      - ./certs/ca/ca.crt:/etc/nginx/ssl/ca.crt:ro,z
      # - media:/media:ro
      - ./media:/media/
      - ./frontend:/usr/share/nginx/frontend/
    networks:
      - main-network
    restart: on-failure

  pong:
    container_name: pong
    build:
      context: game_service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./certs/services/pong/pong.crt:/etc/ssl/pong.crt:ro
      - ./certs/services/pong/pong.key:/etc/ssl/pong.key:ro
      - ./certs/ca/ca.crt:/etc/ssl/ca.crt:ro
    depends_on:
      - redis
    expose:
      - "8006"
    networks:
      - main-network
    restart: on-failure

  cli:
    container_name: cli
    image: alpine
    command: sh -c "apk add --no-cache websocat bash && trap 'exit 0' TERM; sleep infinity & wait"
    networks:
      - main-network

  postgres:
    container_name: postgres
    image: postgres:alpine
    expose:
      - "5432"
    volumes:
        - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - main-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d transcendance -U alice"]
      interval: 1s
      timeout: 1s
      retries: 5
    restart: on-failure

  redis:
    container_name: redis
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    expose:
      - "6379"
    networks:
      - main-network
    restart: on-failure
    env_file:
      - .env

